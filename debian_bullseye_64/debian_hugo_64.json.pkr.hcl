# This file was autogenerated by the BETA 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# See https://www.packer.io/docs/from-1.5/blocks/packer for more info
packer {
  required_version = ">= 1.6.6"
}

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
variable "CreatedVmIPAddr" {
  type    = string
  default = "192.168.164.34"
}

variable "Name_Ethernet_Bridge_Interface" {
  type    = string
  default = "Intel(R) Ethernet Connection I217-LM"
}

variable "Name_TPlink_Bridge_Interface" {
  type    = string
  default = "TP-Link Wireless USB Adapter"
}

variable "PackerHostIPAddr" {
  type    = string
  default = "192.168.1.101"
}

variable "PackerHostIPAddrWifi" {
  type    = string
  default = "192.168.164.236"
}


# could not parse template for following block: "template: hcl2_upgrade:3:283: executing \"hcl2_upgrade\" at <.Name>: can't evaluate field Name in type struct { HTTPIP string; HTTPPort string }"
variable "boot_command" {
  type    = string
  default = "<esc><wait>install <wait> preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/{{user `preseed_path`}} <wait>debian-installer=en_US.UTF-8 <wait>auto <wait>locale=en_US.UTF-8 <wait>kbd-chooser/method=us <wait>keyboard-configuration/xkb-keymap=us <wait>netcfg/get_hostname={{ .Name }} <wait>netcfg/get_domain=pokusup.com <wait>fb=false <wait>debconf/frontend=noninteractive <wait>console-setup/ask_detect=false <wait>console-keymaps-at/keymap=fr <wait>grub-installer/bootdev=default <wait><enter><wait>"
}

variable "boot_command_env_addon" {
  type    = string
  default = "packer_fileserver_ip={{ .HTTPIP }} packer_fileserver_port={{ .HTTPPort }} hostname=${var.hostname} golang_version=1.18.3 hugo_version=0.100.2"
}

variable "build_directory" {
  type    = string
  default = "pokusbox_library"
}

variable "cpus" {
  type    = string
  default = "2"
}

variable "disk_size" {
  type    = string
  default = "65536"
}

variable "git_revision" {
  type    = string
  default = "__unknown_git_revision__"
}

variable "hostname" {
  type    = string
  default = "pokus-packer-test"
}

variable "memory" {
  type    = string
  default = "1024"
}

variable "name" {
  type    = string
  default = "debian-11.3"
}

variable "os_cpu_arch_reference" {
  type    = string
  default = "debian-11.3-amd64"
}

variable "preseed_path" {
  type    = string
  default = "debian/bullseye/amd64/preseed.cfg"
}

variable "ssh_name" {
  type    = string
  default = "pokus"
}

variable "ssh_pass" {
  type    = string
  default = "pokus"
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/from-1.5/blocks/source
# could not parse template for following block: "template: hcl2_upgrade:3:301: executing \"hcl2_upgrade\" at <.Name>: can't evaluate field Name in type struct { HTTPIP string; HTTPPort string }"

source "virtualbox-iso" "autogenerated_1" {
  boot_command     = ["<esc><wait>install <wait>", "preseed/url=http://{{ user `PackerHostIPAddrWifi` }}:{{ .HTTPPort }}/{{user `preseed_path`}} <wait>", "debian-installer=en_US.UTF-8 <wait>", "auto=true <wait>", "priority=critical  <wait>", "interface=enp0s3 <wait>", "netcfg/get_hostname=pokusio-{{ .Name }} <wait>", "netcfg/get_domain=pokusup.com <wait>", "locale=en_US.UTF-8 <wait>", "kbd-chooser/method=us <wait>", "keyboard-configuration/xkb-keymap=fr <wait>", "fb=false <wait>", "debconf/frontend=noninteractive <wait>", "console-setup/ask_detect=false <wait>", "console-keymaps-at/keymap=fr <wait>", "grub-installer/bootdev=default ", "PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>", "{{ user `boot_command_env_addon` }}", " <wait><enter><wait>"]
  boot_wait        = "5s"
  cpus             = "{{ user `cpus` }}"
  disk_size        = "{{ user `disk_size` }}"
  guest_os_type    = "Debian_64"
  http_directory   = "http_directory"
  http_port_max    = 9001
  http_port_min    = 9001
  iso_checksum     = "sha256:7892981e1da216e79fb3a1536ce5ebab157afdd20048fe458f2ae34fbc26c19b"
  iso_url          = "https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.3.0-amd64-netinst.iso"
  memory           = "{{ user `memory` }}"
  output_directory = "{{ user `build_directory` }}/packer-{{user `os_cpu_arch_reference`}}-iso"
  shutdown_command = "echo {{user `ssh_pass`}} | sudo -S shutdown -P now"
  ssh_host         = "{{ user `CreatedVmIPAddr` }}"
  ssh_password     = "{{ user `ssh_pass`}}"
  ssh_port         = 22
  ssh_timeout      = "10000s"
  ssh_username     = "{{ user `ssh_name`}}"
  vboxmanage       = [["modifyvm", "{{.Name}}", "--vram", "96"], ["modifyvm", "{{.Name}}", "--nic1", "bridged"], ["modifyvm", "{{.Name}}", "--bridgeadapter1", "{{ user `Name_TPlink_Bridge_Interface`}}"], ["modifyvm", "{{.Name}}", "--nic2", "bridged"], ["modifyvm", "{{.Name}}", "--bridgeadapter2", "{{ user `Name_Ethernet_Bridge_Interface` }}"]]
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.virtualbox-iso.autogenerated_1"]

  provisioner "shell" {
    script = "${path.root}/scripts/retrieve-ipaddr.sh"
  }
}
